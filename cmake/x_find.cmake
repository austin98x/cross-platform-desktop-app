macro(x_find_ccache)
	if(NOT X_CCACHE)
		execute_process(COMMAND which ccache
			OUTPUT_VARIABLE _ccache
			OUTPUT_STRIP_TRAILING_WHITESPACE
			)
		if(NOT _ccache)
			message(FATAL_ERROR "Can not found ccache!")
		endif()
		set(X_CCACHE "${_ccache}" CACHE FILEPATH "ccache binary path")
	endif()
endmacro()

macro(x_find_split_symbol)
	if(NOT X_SPLIT_SYMBOL)
		if (NOT OBJCOPY_BIN)
			set(OBJCOPY_BIN objcopy)
		endif()
		if (NOT STRIP_BIN)
			set(STRIP_BIN strip)
		endif()
		set(X_SPLIT_SYMBOL "${X_CMAKE_DIR}/scripts/split_symbol.sh")
		set(X_SPLIT_SYMBOL_ARGS "-o ${OBJCOPY_BIN} -s ${STRIP_BIN}")
	endif()
endmacro()

macro(x_find_copy_syslib)
	if (NOT X_COPY_SYSLIB)
		set(X_COPY_SYSLIB "${X_CMAKE_DIR}/scripts/copy_syslib.sh" CACHE FILEPATH "copy system library script")
	endif()
endmacro()

# add Qt by using QT_PATH parameter
macro(x_find_qt)
	if(NOT X_QT_PATH)
		if(EXISTS "${QT_PATH}")
			set(X_QT_PATH "${QT_PATH}" CACHE FILEPATH "Qt path")
		else()
			message(FATAL_ERROR "Can not found Qt, please add QT_PATH parameter}")
		endif()
	endif()
endmacro()

macro(x_find_qt_moc)
	if(NOT X_QT_MOC)
		x_find_qt()
		if(OS_WIN)
			set(_path "${X_QT_PATH}/bin/moc.exe")
		else()
			set(_path "${X_QT_PATH}/bin/moc")
		endif()
		if(EXISTS "${_path}")
			set(X_QT_MOC "${_path}" CACHE FILEPATH "Qt moc compiler")
		else()
			message(FATAL_ERROR "Can not found ${_path}")
		endif()
	endif()
endmacro()

macro(x_find_qt_uic)
	if(NOT X_QT_UIC)
		x_find_qt()
		if(OS_WIN)
			set(_path "${X_QT_PATH}/bin/uic.exe")
		else()
			set(_path "${X_QT_PATH}/bin/uic")
		endif()
		if(EXISTS "${_path}")
			set(X_QT_UIC "${_path}" CACHE FILEPATH "Qt uic compiler")
		else()
			message(FATAL_ERROR "Can not found ${_path}")
		endif()
	endif()
endmacro()

macro(x_find_qt_automoc)
	if(NOT X_QT_AUTOMOC_CXX_SCRIPT)
		x_find_qt_moc()
		set(X_QT_AUTOMOC_CXX_SCRIPT
			"${X_CMAKE_DIR}/qt_automoc_cxx.cmake"
			CACHE STRING "Qt automoc script for cxx"
			)
	endif()
	if(NOT X_QT_AUTOMOC_H_SCRIPT)
		x_find_qt_moc()
		set(X_QT_AUTOMOC_H_SCRIPT
			"${X_CMAKE_DIR}/qt_automoc_h.cmake"
			CACHE STRING "Qt automoc script for h"
			)
	endif()
endmacro()

macro(x_find_qt_rcc)
	if(NOT X_QT_RCC)
		x_find_qt()
		if(OS_WIN)
			set(_path "${X_QT_PATH}/bin/rcc.exe")
		else()
			set(_path "${X_QT_PATH}/bin/rcc")
		endif()
		if(EXISTS "${_path}")
			set(X_QT_RCC "${_path}" CACHE FILEPATH "Qt rcc compiler")
		else()
			message(FATAL_ERROR "Can not found ${_path}")
		endif()
	endif()
endmacro()

macro(x_find_qt_lrelease)
	if(NOT X_QT_LRELEASE)
		x_find_qt()
		if(OS_WIN)
			set(_path "${X_QT_PATH}/bin/lrelease.exe")
		else()
			set(_path "${X_QT_PATH}/bin/lrelease")
		endif()
		if(EXISTS "${_path}")
			set(X_QT_LRELEASE "${_path}" CACHE FILEPATH "Qt's Linguist tool chain")
		else()
			message(FATAL_ERROR "Can not found ${_path}")
		endif()
	endif()
endmacro()

macro(x_find_qt_lupdate)
	if(NOT X_QT_LUPDATE)
		x_find_qt()
		if(OS_WIN)
			set(_path "${X_QT_PATH}/bin/lupdate.exe")
		else()
			set(_path "${X_QT_PATH}/bin/lupdate")
		endif()
		if(EXISTS "${_path}")
			set(X_QT_LUPDATE "${_path}" CACHE FILEPATH "Qt's Linguist tool chain")
		else()
			message(FATAL_ERROR "Can not found ${_path}")
		endif()
	endif()
endmacro()
