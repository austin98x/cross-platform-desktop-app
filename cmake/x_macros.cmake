macro(_args_system_filter _filtered_args_ref)
	set(${_filtered_args_ref})
	_impl_args_system_filter(${_filtered_args_ref} ${ARGN})
endmacro()

macro(_impl_args_system_filter _filtered_args_ref)
	set(_argn ${ARGN})
	set(_a)
	while(NOT "!${_argn}" STREQUAL "!")
		_token_list_element(_argn 0 _a)
		if(_a MATCHES "(^WIN$|^LINUX$)")
			list(GET _argn 0 _b)
			if("!${_b}" STREQUAL "!(")
				list(REMOVE_AT _argn 0)
				if(OS_${_a})
					_impl_args_system_filter(${_filtered_args_ref} ${_argn})
				else()
					_del_args()
				endif()
			else()
				list(APPEND ${_filtered_args_ref} "${_a}")
			endif()
		elseif("!${_a}" STREQUAL "!)")
			break()
		else()
			list(APPEND ${_filtered_args_ref} "${_a}")
		endif()
	endwhile()
endmacro()

macro(_token_list_element _tle_list_ref _tle_list_index _tle_element_ref)
	list(GET ${_tle_list_ref} ${_tle_list_index} ${_tle_element_ref})
	list(REMOVE_AT ${_tle_list_ref} ${_tle_list_index})
endmacro()

macro(_del_args)
	_token_list_element(_argn 0 _a)
	while(NOT "!${_a}" STREQUAL "!)")
		if("!${_a}" STREQUAL "!(")
			_del_args()
		endif()
		_token_list_element(_argn 0 _a)
	endwhile()
endmacro()

macro(_uncache_vars)
	foreach(_v_ref ${ARGN})
		get_property(${_v_ref}_CACHE_TYPE CACHE ${_v_ref} PROPERTY TYPE)
		if(NOT ${_v_ref}_CACHE_TYPE)
			message(FATAL_ERROR "Cache entry: ${_v_ref} not exists.")
		endif()
		get_property(${_v_ref}_CACHE_HELPSTRING CACHE ${_v_ref} PROPERTY HELPSTRING)
		get_property(${_v_ref}_CACHE_ADVANCED CACHE ${_v_ref} PROPERTY ADVANCED)
		set(_tmp ${${_v_ref}})
		unset(${_v_ref} CACHE)
		set(${_v_ref} ${_tmp})
		list(APPEND _UNCACHED_VARIANTS_LIST ${_v_ref})
	endforeach()
endmacro()

macro(_recache_vars)
	foreach(_v_ref ${_UNCACHED_VARIANTS_LIST})
		set(${s_v_ref} ${${_v_ref}} CACHE ${${_v_ref}_CACHE_TYPE} ${${_v_ref}_CACHE_HELPSTRING})
		if(${_v_ref}_CACHE_ADVANCED)
			mark_as_advanced(${_v_ref})
		endif()
	endforeach()
endmacro()

# find _radio_options in _input and then remove it in _input
# if no found _default is returned. if more then one found error occused
# example: _token_radio_option(ARGN "AAA|BBB|CC" "BBB" _result)
function(_token_radio_option _input _radio_options _default _output)
	set(_l ${${_input}})
	string(REGEX MATCHALL "[^|]+" _opts "${_radio_options}")
	set(_nhit 0)
	set(_hit)
	foreach(_x ${_l})
		list(FIND _opts "${_x}" _idx)
		if(NOT _idx EQUAL -1)
			math(EXPR _nhit "${_nhit}+1")
			set(_hit "${_x}")
		endif()
	endforeach()
	if(_nhit EQUAL 0)
		set(${_output} ${_default} PARENT_SCOPE)
	elseif(_nhit EQUAL 1)
		set(${_output} ${_hit} PARENT_SCOPE)
		list(REMOVE_ITEM _l "${_hit}")
		set(${_input} ${_l} PARENT_SCOPE)
	else()
		message(FATAL_ERROR "radio option check error!")
	endif()
endfunction()

macro(_generate_binary_info_file)
	if(NOT "${X_CURRENT_PACKAGE_TYPE}!" STREQUAL "NONE!" AND
		NOT	"${X_CURRENT_PACKAGE_TYPE}!" STREQUAL "STATIC!")
		if(X_CURRENT_FILE_VERSION)
			set(X_FILE_VERSION ${X_CURRENT_FILE_VERSION})
		elseif(FILE_VERSION)
			set(X_FILE_VERSION ${FILE_VERSION})
		endif()		
		string(REPLACE "." "," X_FILE_VERSION ${X_FILE_VERSION})
		string(REPLACE "." "," X_PRODUCT_VERSION ${PRODUCT_VERSION})

		string(TOLOWER ${X_CURRENT_PACKAGE_NAME} _lower_package_name)

		if(X_CURRENT_PRODUCT_VERSION)
			set(X_PRODUCT_VERSION ${X_CURRENT_PRODUCT_VERSION})
		endif()

		set(X_FILE_DESCRIPTION ${X_CURRENT_FILE_DESCRIPTION})
		set(X_INTERNAL_NAME ${X_CURRENT_PACKAGE_NAME})
		set(X_COMPANY_NAME ${X_CURRENT_COMPANY_NAME})
		set(X_COPYRIGHT ${X_CURRENT_COPY_RIGHT})
		set(X_PRODUCT_NAME ${X_CURRENT_PRODUCT_NAME})

		set(_rc_file_temp "${X_CONFIG_TEMPLATE_DIR}/Version.rc.in")
		if(X_CURRENT_VERSION_RC_NAME_AFFIX)
			set(_rc_file "${CMAKE_CURRENT_BINARY_DIR}/Version_${X_CURRENT_VERSION_RC_NAME_AFFIX}.rc")
		else()
			set(_rc_file "${CMAKE_CURRENT_BINARY_DIR}/Version.rc")
		endif()
		configure_file(${_rc_file_temp} ${_rc_file}.tmp)
		if("${_rc_file}.tmp" IS_NEWER_THAN "${_rc_file}" AND NOT "!${CMAKE_USE_LTCG}" STREQUAL "!PGOptimize")
			_convert_file_code("UTF-8" "${_rc_file}.tmp" "UTF-16LE" "${_rc_file}")
		endif()
		x_add_sources(${_rc_file})
	endif()	
endmacro()

macro(_deal_sources _srcs_ref)
	set(_wds_srcs ${${_srcs_ref}})
	
	set(_srcs_for_compile)
	set(_srcs_grouped)
	set(_group_idx 0)
	foreach(_src ${_wds_srcs})
		if(NOT _src STREQUAL "X_SOURCE_SEPARATOR")
			list(APPEND _srcs_grouped ${_src})
			if(IS_ABSOLUTE ${_src})
				file(RELATIVE_PATH _group_path ${CMAKE_CURRENT_SOURCE_DIR} ${_src})
			else()
				file(RELATIVE_PATH _group_path ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${_src})
			endif()
			get_filename_component(_group_path ${_group_path} PATH)
			file(TO_NATIVE_PATH "${_group_path}" _group_path)
			string(REPLACE "/" "\\" _group_path "${_group_path}")
			source_group("${_group_path}" FILES ${_src})
		else()
			if(_srcs_grouped)
				_deal_sources_group(_srcs_grouped ${_group_idx})
				list(APPEND _srcs_for_compile ${_srcs_grouped})
			endif()
			set(_srcs_grouped)
			math(EXPR _group_idx "${_group_idx}+1")
		endif()
	endforeach()

	set(${_srcs_ref} ${_srcs_for_compile})
endmacro()

macro(_deal_sources_group _srcs_ref _group_idx)
	set(_wdsg_srcs ${${_srcs_ref}})

	set(_pch_header "")
	set(_pch_source "")

	list(FIND _wdsg_srcs "PCH" _pch_idx)
	if(NOT _pch_idx EQUAL -1)
		list(REMOVE_AT _wdsg_srcs ${_pch_idx})
		list(GET _wdsg_srcs ${_pch_idx} _pch_header)
		list(REMOVE_AT _wdsg_srcs ${_pch_idx})
		list(GET _wdsg_srcs ${_pch_idx} _pch_source)
		list(REMOVE_AT _wdsg_srcs ${_pch_idx})
	endif()

	if(_pch_header)
		_deal_pch(_wdsg_srcs ${_pch_header} ${_pch_source})
	endif()	

	set(${_srcs_ref} ${_wdsg_srcs})
endmacro()

macro(_deal_pch _srcs_ref _pch_header _pch_source)
	set(_deal_pch_srcs ${${_srcs_ref}})
	if(MSVC)
		if(CMAKE_GENERATOR MATCHES "^Visual Studio")
			foreach(_x ${_deal_pch_srcs})
				if(_x MATCHES "(\\.cpp$|\\.cc$|\\.cxx$)")
					set_property(SOURCE "${_x}" PROPERTY COMPILE_FLAGS "/Yu\"${_pch_header}\"")
				endif()
			endforeach()
			list(APPEND _deal_pch_srcs ${_pch_header} ${_pch_source})
			set_property(SOURCE "${_pch_source}" PROPERTY COMPILE_FLAGS "/Yc\"${_pch_header}\"")
		else()
			set(_pch_pch ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${X_CURRENT_PACKAGE_NAME}.dir/${_pch_header}.pch)
			set(_pch_obj ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${X_CURRENT_PACKAGE_NAME}.dir/${_pch_source}.obj)
			_get_compile_args(CXX _args)
			_get_pdb_output_fullpath(_pdb_pos)
			foreach(_x ${_deal_pch_srcs})
				if(_x MATCHES "(\\.cpp$|\\.cc$|\\.cxx$)")
					get_property(_flags SOURCE "${_x}" PROPERTY COMPILE_FLAGS)
					set_property(SOURCE "${_x}" 
						PROPERTY COMPILE_FLAGS "${_flags} /Yu\"${_pch_header}\" /Fp\"${_pch_pch}\"")
					get_property(_obj_dep SOURCE "${_x}" PROPERTY OBJECT_DEPENDS)
					if(_obj_dep)
						set(_obj_dep "${_obj_dep};")
					endif()
					set_property(SOURCE "${_x}" PROPERTY OBJECT_DEPENDS "${_obj_dep}${_pch_pch}")
				endif()
			endforeach()
			list(APPEND _deal_pch_srcs ${_pch_header}) # pch's source do not add back to src list
			list(APPEND X_CURRENT_PACKAGE_LINK_LIBRARYS "${_pch_obj}")
			add_custom_command(
				OUTPUT ${_pch_pch} ${_pch_obj}
				COMMAND ${CMAKE_CXX_COMPILER} /c ${_args} ${X_CURRENT_PACKAGE_OPTIMIZATION} /Yc\"${_pch_header}\" 
						/Fp\"${_pch_pch}\" /Fd\"${_pdb_pos}\" /Fo\"${_pch_obj}\"
						"${CMAKE_CURRENT_SOURCE_DIR}/${_pch_source}"
				MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/${_pch_source}
				IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/${_pch_source}
				COMMENT "Creating Precompiler header..."
				)
		endif()
	else()
		_get_compile_args(CXX _args)
		# pch's source do not used, build same as normal source file.
		list(APPEND _deal_pch_srcs ${_pch_header} ${_pch_source}) 
		_create_include_ref("${_pch_header}" "${CMAKE_CURRENT_BINARY_DIR}/${_pch_header}")
		set(_pch_pch "${CMAKE_CURRENT_BINARY_DIR}/${_pch_header}.gch")
		foreach(_x ${_deal_pch_srcs})
			if(_x MATCHES "(\\.cpp$|\\.cc$|\\.cxx$)")
				set_property(SOURCE "${_x}" PROPERTY OBJECT_DEPENDS "${_pch_pch}")
			endif()
		endforeach()
		if ("${CMAKE_GENERATOR}!" STREQUAL "Ninja!")
			if("${X_CURRENT_PACKAGE_TYPE}!" STREQUAL "SHARED!")
				set(_args ${_args} -D${X_CURRENT_PACKAGE_NAME}_EXPORTS)
			endif()
			add_custom_command(
				OUTPUT ${_pch_pch}
				COMMAND ${X_COMPILER_LEADER} ${CMAKE_CXX_COMPILER} -x c++-header ${_args} ${X_CURRENT_PACKAGE_OPTIMIZATION} "${CMAKE_CURRENT_SOURCE_DIR}/${_pch_header}" -o "${_pch_pch}"
				MAIN_DEPENDENCY ${_pch_header}
				IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/${_pch_header}
				COMMENT "Creating Precompiler header..."
				)
		else()
			add_custom_command(
				OUTPUT ${_pch_pch}
				COMMAND ${X_COMPILER_LEADER} ${CMAKE_CXX_COMPILER} -x c++-header "$(CXX_DEFINES)" "$(CXX_FLAGS)" "$(CXX_INCLUDES)" ${X_CURRENT_PACKAGE_OPTIMIZATION} "${CMAKE_CURRENT_SOURCE_DIR}/${_pch_header}" -o "${_pch_pch}"
				MAIN_DEPENDENCY ${_pch_header}
				IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/${_pch_header}
				COMMENT "Creating Precompiler header..."
				)
		endif()
		if("!${CMAKE_CXX_COMPILER_ID}" STREQUAL "!GNU")
			foreach(_x ${_deal_pch_srcs})
				if(_x MATCHES "(\\.cpp$|\\.cc$|\\.cxx$)")
					get_property(_flags SOURCE "${_x}" PROPERTY COMPILE_FLAGS)
					set_property(SOURCE "${_x}" 
						PROPERTY COMPILE_FLAGS "${_flags} -fpch-preprocess -include ${CMAKE_CURRENT_BINARY_DIR}/${_pch_header}")
				endif()
			endforeach()
		elseif("!${CMAKE_CXX_COMPILER_ID}" STREQUAL "!Clang")
			foreach(_x ${_deal_pch_srcs})
				if(_x MATCHES "(\\.cpp$|\\.cc$|\\.cxx$)")
					get_property(_flags SOURCE "${_x}" PROPERTY COMPILE_FLAGS)
					set_property(SOURCE "${_x}" 
						PROPERTY COMPILE_FLAGS "${_flags} -include-pch ${_pch_pch}")
				endif()
			endforeach()
		endif()
	endif()
	set(${_srcs_ref} ${_deal_pch_srcs})
endmacro()

function(_get_compile_args _lang _output)
	if(MSVC)
		set(_def_prefix "/D")
		set(_inc_prefix "/I")
	else()
		set(_def_prefix "-D")
		set(_inc_prefix "-I")
	endif()

	set(_defs)
	foreach(_d ${X_CURRENT_PACKAGE_DEFINITIONS})
		string(REPLACE "\"" "\\\"" _d "${_d}")
		list(APPEND _defs "${_def_prefix}${_d}")
	endforeach()
	get_property(_ds DIRECTORY PROPERTY COMPILE_DEFINITIONS)
	foreach(_d ${_ds})
		string(REPLACE "\"" "\\\"" _d "${_d}")
		list(APPEND _defs "${_def_prefix}${_d}")
	endforeach()
	get_property(_is DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
	set(_incs)
	foreach(_i ${_is})
		list(APPEND _incs "${_inc_prefix}\"${_i}\"")
	endforeach()
	
	string(REGEX MATCHALL "[^ ;]+" _flags "${CMAKE_${_lang}_FLAGS} ${CMAKE_${_lang}_FLAGS_${BUILD_TYPE_UPPER}}")
	set(${_output} ${_incs} ${_defs} ${_flags} PARENT_SCOPE)
endfunction()

macro(_create_include_ref _f _header)
	if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${_f}")
		message(FATAL_ERROR "${_f} does not exists!")
	endif()
	if(NOT EXISTS "${_header}")
		get_filename_component(_pub_d "${_header}" PATH)
		file(RELATIVE_PATH _relative_path "${_pub_d}" "${CMAKE_CURRENT_SOURCE_DIR}/${_f}")
		set(_cont "// file created by wps build system, do not edit!\n\n#include \"${_relative_path}\"\n\n")
		file(WRITE "${_header}" "${_cont}")
	endif()
endmacro()

macro(_disable_analysis_for_generated_file _srcs_ref)
	set(_dafgf_srcs ${${_srcs_ref}})
	if(X_STATIC_CODE_ANALYZE)
		foreach(_src ${_dafgf_srcs})
			if((IS_ABSOLUTE ${_src}) AND 
				(NOT _src MATCHES ${CMAKE_SOURCE_DIR}) AND 
				_src MATCHES "/qrc_.*\\.cpp$"
				)
				set_property(SOURCE "${_src}" PROPERTY COMPILE_FLAGS "/analyze-")
			endif()
		endforeach()
	endif()
endmacro()

macro(_append_target_property_string _target _property _val)
	get_target_property(_orig_val ${_target} ${_property})
	if(_orig_val)
		set_target_properties(${_target} PROPERTIES ${_property} "${_orig_val} ${_val}")
	else()
		set_target_properties(${_target} PROPERTIES ${_property} "${_val}")
	endif()
endmacro()

macro(_convert_file_code _src_code _src_file _dst_code _dst_file)
	file(TO_NATIVE_PATH "${_src_file}" _src_file_native)
	file(TO_NATIVE_PATH "${_dst_file}" _dst_file_native)
	execute_process(
		COMMAND "iconv" "-f" "${_src_code}" "-t" "${_dst_code}" "${_src_file_native}"
		OUTPUT_FILE "${_dst_file_native}"
		RESULT_VARIABLE _execute_result
		)
	if(NOT _execute_result EQUAL 0)
		message(FATAL_ERROR "iconv.exe convert code failed, file:${_src_file_native}")
	endif()
endmacro()
